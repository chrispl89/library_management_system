services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: library_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=library_db
      - POSTGRES_USER=library_user
      - POSTGRES_PASSWORD=library_pass123
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U library_user -d library_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./django
      dockerfile: Dockerfile
    container_name: library_backend
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./django:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    environment:
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=django-insecure-docker-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - DATABASE_URL=postgresql://library_user:library_pass123@db:5432/library_db
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=library_db
      - DB_USER=library_user
      - DB_PASSWORD=library_pass123
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: library_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: library_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/static
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  postgres_data:
  static_volume:
