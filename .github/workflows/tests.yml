name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  django-tests:
    name: Django Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: library_db_test
          POSTGRES_USER: library_user
          POSTGRES_PASSWORD: library_pass123
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U library_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('django/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r django/requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://library_user:library_pass123@localhost:5432/library_db_test" >> $GITHUB_ENV
        echo "DJANGO_SECRET_KEY=test-secret-key-for-ci-only" >> $GITHUB_ENV
        echo "DJANGO_DEBUG=True" >> $GITHUB_ENV

    - name: Wait for PostgreSQL
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if pg_isready -h localhost -U library_user; then
            echo "PostgreSQL is ready!"
            exit 0
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done
        echo "PostgreSQL failed to start"
        exit 1

    - name: Run Django migrations
      working-directory: ./django
      run: |
        python manage.py migrate --noinput
      env:
        DATABASE_URL: postgresql://library_user:library_pass123@localhost:5432/library_db_test

    - name: Run Django tests
      working-directory: ./django
      run: |
        python manage.py test --verbosity=2
      env:
        DATABASE_URL: postgresql://library_user:library_pass123@localhost:5432/library_db_test

  react-tests:
    name: React Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Clean install dependencies
      working-directory: ./frontend
      run: |
        echo "Removing package-lock.json temporarily..."
        rm -f package-lock.json
        echo ""
        echo "Removing node_modules if exists..."
        rm -rf node_modules
        echo ""
        echo "Installing dependencies with --force..."
        npm install --force
        echo ""
        echo "=== Installation complete ==="
        echo "Checking if react-router-dom exists..."
        test -d node_modules/react-router-dom && echo "✓ react-router-dom installed" || echo "✗ react-router-dom MISSING"
        echo ""
        echo "=== Package versions ==="
        npm list react react-dom react-router-dom axios 2>/dev/null || echo "Some packages not listed"

    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false --passWithNoTests --ci
      env:
        CI: true

    - name: Build
      working-directory: ./frontend
      run: npm run build
      env:
        CI: false
        REACT_APP_API_URL: http://localhost:8000

  docker-build:
    name: Docker Build & Integration Test
    runs-on: ubuntu-latest
    needs: [django-tests, react-tests]
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Validate Docker Compose configuration
      run: |
        docker-compose config > /dev/null
        echo "✓ Docker Compose configuration is valid"

    - name: Build Docker images
      run: |
        echo "Building backend..."
        docker-compose build backend
        echo "Building frontend..."
        docker-compose build frontend
        echo "✓ Docker images built successfully"

    - name: Start services
      run: |
        echo "Starting database..."
        docker-compose up -d db
        echo "Waiting for database..."
        sleep 10
        
        echo "Starting backend..."
        docker-compose up -d backend
        echo "Waiting for backend to start..."
        sleep 20
        
        echo "Starting frontend..."
        docker-compose up -d frontend
        sleep 10

    - name: Check container status
      run: |
        echo "=== Container Status ==="
        docker-compose ps
        echo ""
        echo "=== Container Health ==="
        docker ps --format "table {{.Names}}\t{{.Status}}"

    - name: Wait for backend
      timeout-minutes: 3
      run: |
        echo "Checking backend health..."
        for i in {1..30}; do
          if curl -f -s http://localhost:8000/api/books/ 2>/dev/null || curl -f -s http://localhost:8000/admin/ 2>/dev/null; then
            echo "✓ Backend is responding"
            exit 0
          fi
          echo "Attempt $i/30..."
          sleep 5
        done
        echo "✗ Backend health check failed"
        docker-compose logs backend --tail=50
        exit 1

    - name: Wait for frontend
      run: |
        echo "Checking frontend..."
        for i in {1..20}; do
          if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
            echo "✓ Frontend is responding"
            exit 0
          fi
          echo "Attempt $i/20..."
          sleep 3
        done
        echo "✗ Frontend health check failed"
        docker-compose logs frontend --tail=50
        exit 1

    - name: Run Django tests in Docker
      run: |
        echo "Running Django tests..."
        docker-compose exec -T backend python manage.py test library --verbosity=1

    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Status ==="
        docker-compose ps
        echo ""
        echo "=== Backend Logs (last 100 lines) ==="
        docker-compose logs backend --tail=100
        echo ""
        echo "=== Frontend Logs (last 50 lines) ==="
        docker-compose logs frontend --tail=50
        echo ""
        echo "=== Database Logs (last 50 lines) ==="
        docker-compose logs db --tail=50

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        docker system prune -f
